/*
  # Fix Dynamic Sections Tables

  1. Tables
    - Ensure `dynamic_sections` table exists with all required columns
    - Ensure `section_items` table exists with all required columns
    - Add missing columns if they don't exist
    - Set up proper relationships and constraints

  2. Security
    - Enable RLS on both tables
    - Add policies for public read access
    - Add policies for authenticated user management

  3. Indexes
    - Add performance indexes for common queries
*/

-- Create dynamic_sections table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.dynamic_sections (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    section_name text UNIQUE NOT NULL,
    title text NOT NULL,
    subtitle text,
    description text,
    background_color text DEFAULT '#ffffff',
    text_color text DEFAULT '#000000',
    position_order integer DEFAULT 0,
    is_visible boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

-- Add missing columns to dynamic_sections if they don't exist
DO $$
BEGIN
    -- Check and add subtitle column
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'dynamic_sections' AND column_name = 'subtitle'
    ) THEN
        ALTER TABLE public.dynamic_sections ADD COLUMN subtitle text;
    END IF;

    -- Check and add description column
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'dynamic_sections' AND column_name = 'description'
    ) THEN
        ALTER TABLE public.dynamic_sections ADD COLUMN description text;
    END IF;

    -- Check and add background_color column
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'dynamic_sections' AND column_name = 'background_color'
    ) THEN
        ALTER TABLE public.dynamic_sections ADD COLUMN background_color text DEFAULT '#ffffff';
    END IF;

    -- Check and add text_color column
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'dynamic_sections' AND column_name = 'text_color'
    ) THEN
        ALTER TABLE public.dynamic_sections ADD COLUMN text_color text DEFAULT '#000000';
    END IF;

    -- Check and add position_order column
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'dynamic_sections' AND column_name = 'position_order'
    ) THEN
        ALTER TABLE public.dynamic_sections ADD COLUMN position_order integer DEFAULT 0;
    END IF;

    -- Check and add is_visible column
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'dynamic_sections' AND column_name = 'is_visible'
    ) THEN
        ALTER TABLE public.dynamic_sections ADD COLUMN is_visible boolean DEFAULT true;
    END IF;

    -- Check and add updated_at column
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'dynamic_sections' AND column_name = 'updated_at'
    ) THEN
        ALTER TABLE public.dynamic_sections ADD COLUMN updated_at timestamp with time zone DEFAULT now();
    END IF;
END $$;

-- Create section_items table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.section_items (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    section_id bigint NOT NULL,
    item_type text NOT NULL,
    content jsonb DEFAULT '{}' NOT NULL,
    position_order integer DEFAULT 0,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

-- Add foreign key constraint if it doesn't exist
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints 
        WHERE constraint_name = 'section_items_section_id_fkey'
    ) THEN
        ALTER TABLE public.section_items 
        ADD CONSTRAINT section_items_section_id_fkey 
        FOREIGN KEY (section_id) REFERENCES public.dynamic_sections(id) ON DELETE CASCADE;
    END IF;
END $$;

-- Create update_updated_at_column function if it doesn't exist
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers for updated_at columns
DROP TRIGGER IF EXISTS update_dynamic_sections_updated_at ON public.dynamic_sections;
CREATE TRIGGER update_dynamic_sections_updated_at
    BEFORE UPDATE ON public.dynamic_sections
    FOR EACH ROW
    EXECUTE FUNCTION public.update_updated_at_column();

DROP TRIGGER IF EXISTS update_section_items_updated_at ON public.section_items;
CREATE TRIGGER update_section_items_updated_at
    BEFORE UPDATE ON public.section_items
    FOR EACH ROW
    EXECUTE FUNCTION public.update_updated_at_column();

-- Enable RLS
ALTER TABLE public.dynamic_sections ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.section_items ENABLE ROW LEVEL SECURITY;

-- Create policies for dynamic_sections
DROP POLICY IF EXISTS "Allow public read access to dynamic sections" ON public.dynamic_sections;
CREATE POLICY "Allow public read access to dynamic sections"
    ON public.dynamic_sections
    FOR SELECT
    TO public
    USING (true);

DROP POLICY IF EXISTS "Allow authenticated users to manage dynamic sections" ON public.dynamic_sections;
CREATE POLICY "Allow authenticated users to manage dynamic sections"
    ON public.dynamic_sections
    FOR ALL
    TO authenticated
    USING (true)
    WITH CHECK (true);

-- Create policies for section_items
DROP POLICY IF EXISTS "Allow public read access to section items" ON public.section_items;
CREATE POLICY "Allow public read access to section items"
    ON public.section_items
    FOR SELECT
    TO public
    USING (true);

DROP POLICY IF EXISTS "Allow authenticated users to manage section items" ON public.section_items;
CREATE POLICY "Allow authenticated users to manage section items"
    ON public.section_items
    FOR ALL
    TO authenticated
    USING (true)
    WITH CHECK (true);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_dynamic_sections_position_order 
    ON public.dynamic_sections (position_order);

CREATE INDEX IF NOT EXISTS idx_dynamic_sections_is_visible 
    ON public.dynamic_sections (is_visible);

CREATE INDEX IF NOT EXISTS idx_section_items_section_id 
    ON public.section_items (section_id);

CREATE INDEX IF NOT EXISTS idx_section_items_position_order 
    ON public.section_items (position_order);