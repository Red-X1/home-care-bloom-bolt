/*
  # Исправление таблицы theme_settings

  1. Создание таблицы theme_settings с правильной структурой
  2. Настройка RLS политик
  3. Добавление триггера для updated_at
  4. Вставка настроек по умолчанию
*/

-- Создаем функцию обновления updated_at если её нет
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Создаем таблицу theme_settings если её нет
CREATE TABLE IF NOT EXISTS theme_settings (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  setting_name text UNIQUE NOT NULL,
  setting_value jsonb NOT NULL DEFAULT '{}'::jsonb,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Включаем RLS
ALTER TABLE theme_settings ENABLE ROW LEVEL SECURITY;

-- Удаляем существующие политики если они есть
DROP POLICY IF EXISTS "Anyone can view theme settings" ON theme_settings;
DROP POLICY IF EXISTS "Anyone can insert theme settings" ON theme_settings;
DROP POLICY IF EXISTS "Anyone can update theme settings" ON theme_settings;

-- Создаем новые политики
CREATE POLICY "Anyone can view theme settings"
  ON theme_settings
  FOR SELECT
  TO public
  USING (true);

CREATE POLICY "Anyone can insert theme settings"
  ON theme_settings
  FOR INSERT
  TO public
  WITH CHECK (true);

CREATE POLICY "Anyone can update theme settings"
  ON theme_settings
  FOR UPDATE
  TO public
  USING (true);

-- Удаляем существующий триггер если он есть
DROP TRIGGER IF EXISTS update_theme_settings_updated_at ON theme_settings;

-- Создаем триггер для автоматического обновления updated_at
CREATE TRIGGER update_theme_settings_updated_at
  BEFORE UPDATE ON theme_settings
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- Вставляем настройки по умолчанию
INSERT INTO theme_settings (setting_name, setting_value) VALUES
  ('colors', '{
    "primary": "#0EA5E9",
    "secondary": "#64748B", 
    "accent": "#EC4899",
    "background": "#FFFFFF",
    "foreground": "#1E293B",
    "muted": "#F1F5F9",
    "border": "#E2E8F0"
  }'::jsonb),
  ('theme_mode', '{"mode": "light"}'::jsonb),
  ('typography', '{
    "fontFamily": "Inter",
    "headingWeight": "600",
    "bodyWeight": "400"
  }'::jsonb)
ON CONFLICT (setting_name) DO UPDATE SET
  setting_value = EXCLUDED.setting_value,
  updated_at = now();