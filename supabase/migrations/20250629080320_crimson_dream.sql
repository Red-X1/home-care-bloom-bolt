/*
  # Fix policy conflicts and ensure all tables exist

  1. Tables
    - Safely create missing tables (dynamic_sections, section_items, theme_settings)
    - Add proper constraints and indexes
    
  2. Security
    - Only create policies if they don't exist
    - Enable RLS on all tables
    - Set up proper permissions
    
  3. Data
    - Insert default theme settings
*/

-- Create update_updated_at_column function if it doesn't exist
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create dynamic_sections table if it doesn't exist
CREATE TABLE IF NOT EXISTS dynamic_sections (
  id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  section_name text UNIQUE NOT NULL,
  title text NOT NULL,
  subtitle text,
  description text,
  background_color text DEFAULT '#ffffff',
  text_color text DEFAULT '#000000',
  position_order integer DEFAULT 0,
  is_visible boolean DEFAULT true,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Create section_items table if it doesn't exist
CREATE TABLE IF NOT EXISTS section_items (
  id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  section_id bigint NOT NULL,
  item_type text NOT NULL,
  content jsonb DEFAULT '{}' NOT NULL,
  position_order integer DEFAULT 0,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Create theme_settings table if it doesn't exist
CREATE TABLE IF NOT EXISTS theme_settings (
  id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  setting_name text UNIQUE NOT NULL,
  setting_value jsonb DEFAULT '{}' NOT NULL,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Add foreign key constraint for section_items if it doesn't exist
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE constraint_name = 'section_items_section_id_fkey'
    AND table_name = 'section_items'
    AND table_schema = 'public'
  ) THEN
    ALTER TABLE section_items 
    ADD CONSTRAINT section_items_section_id_fkey 
    FOREIGN KEY (section_id) REFERENCES dynamic_sections(id) ON DELETE CASCADE;
  END IF;
END $$;

-- Enable RLS on all tables
ALTER TABLE dynamic_sections ENABLE ROW LEVEL SECURITY;
ALTER TABLE section_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE theme_settings ENABLE ROW LEVEL SECURITY;

-- Create policies only if they don't exist
DO $$
BEGIN
  -- Dynamic sections policies
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'dynamic_sections' 
    AND policyname = 'Allow authenticated users to manage dynamic sections'
  ) THEN
    CREATE POLICY "Allow authenticated users to manage dynamic sections"
      ON dynamic_sections FOR ALL
      TO authenticated
      USING (true)
      WITH CHECK (true);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'dynamic_sections' 
    AND policyname = 'Allow public read access to dynamic sections'
  ) THEN
    CREATE POLICY "Allow public read access to dynamic sections"
      ON dynamic_sections FOR SELECT
      TO public
      USING (true);
  END IF;
END $$;

DO $$
BEGIN
  -- Section items policies
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'section_items' 
    AND policyname = 'Allow authenticated users to manage section items'
  ) THEN
    CREATE POLICY "Allow authenticated users to manage section items"
      ON section_items FOR ALL
      TO authenticated
      USING (true)
      WITH CHECK (true);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'section_items' 
    AND policyname = 'Allow public read access to section items'
  ) THEN
    CREATE POLICY "Allow public read access to section items"
      ON section_items FOR SELECT
      TO public
      USING (true);
  END IF;
END $$;

DO $$
BEGIN
  -- Theme settings policies
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'theme_settings' 
    AND policyname = 'Anyone can insert theme settings'
  ) THEN
    CREATE POLICY "Anyone can insert theme settings"
      ON theme_settings FOR INSERT
      TO public
      WITH CHECK (true);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'theme_settings' 
    AND policyname = 'Anyone can update theme settings'
  ) THEN
    CREATE POLICY "Anyone can update theme settings"
      ON theme_settings FOR UPDATE
      TO public
      USING (true);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'theme_settings' 
    AND policyname = 'Anyone can view theme settings'
  ) THEN
    CREATE POLICY "Anyone can view theme settings"
      ON theme_settings FOR SELECT
      TO public
      USING (true);
  END IF;
END $$;

-- Create indexes if they don't exist
DO $$
BEGIN
  -- Dynamic sections indexes
  IF NOT EXISTS (
    SELECT 1 FROM pg_indexes 
    WHERE indexname = 'idx_dynamic_sections_position_order'
    AND tablename = 'dynamic_sections'
  ) THEN
    CREATE INDEX idx_dynamic_sections_position_order ON dynamic_sections(position_order);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_indexes 
    WHERE indexname = 'idx_dynamic_sections_is_visible'
    AND tablename = 'dynamic_sections'
  ) THEN
    CREATE INDEX idx_dynamic_sections_is_visible ON dynamic_sections(is_visible);
  END IF;

  -- Section items indexes
  IF NOT EXISTS (
    SELECT 1 FROM pg_indexes 
    WHERE indexname = 'idx_section_items_section_id'
    AND tablename = 'section_items'
  ) THEN
    CREATE INDEX idx_section_items_section_id ON section_items(section_id);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_indexes 
    WHERE indexname = 'idx_section_items_position_order'
    AND tablename = 'section_items'
  ) THEN
    CREATE INDEX idx_section_items_position_order ON section_items(position_order);
  END IF;
END $$;

-- Create triggers for updated_at columns if they don't exist
DO $$
BEGIN
  -- Dynamic sections trigger
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.triggers 
    WHERE trigger_name = 'update_dynamic_sections_updated_at'
    AND event_object_table = 'dynamic_sections'
  ) THEN
    CREATE TRIGGER update_dynamic_sections_updated_at
      BEFORE UPDATE ON dynamic_sections
      FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
  END IF;

  -- Section items trigger
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.triggers 
    WHERE trigger_name = 'update_section_items_updated_at'
    AND event_object_table = 'section_items'
  ) THEN
    CREATE TRIGGER update_section_items_updated_at
      BEFORE UPDATE ON section_items
      FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
  END IF;

  -- Theme settings trigger
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.triggers 
    WHERE trigger_name = 'update_theme_settings_updated_at'
    AND event_object_table = 'theme_settings'
  ) THEN
    CREATE TRIGGER update_theme_settings_updated_at
      BEFORE UPDATE ON theme_settings
      FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
  END IF;
END $$;

-- Insert default theme settings if they don't exist
INSERT INTO theme_settings (setting_name, setting_value) 
VALUES 
  ('colors', '{"primary": "#0EA5E9", "secondary": "#64748B", "accent": "#EC4899", "background": "#FFFFFF", "foreground": "#1E293B", "muted": "#F1F5F9", "border": "#E2E8F0"}'::jsonb),
  ('theme_mode', '{"mode": "light"}'::jsonb),
  ('typography', '{"fontFamily": "Inter", "headingWeight": "600", "bodyWeight": "400"}'::jsonb)
ON CONFLICT (setting_name) DO NOTHING;