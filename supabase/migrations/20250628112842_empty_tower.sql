/*
  # Fix missing dynamic_sections table and related issues

  1. New Tables
    - `dynamic_sections` - For custom sections on the main page
    - `section_items` - For items within sections
    - `theme_settings` - For site theme and color customization

  2. Security
    - Enable RLS on all new tables
    - Add policies for public access and authenticated management

  3. Data
    - Insert default theme settings
    - Create necessary indexes and triggers
*/

-- Create or replace the update function
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- ============================================================================
-- DYNAMIC_SECTIONS TABLE
-- ============================================================================

-- Create dynamic_sections table
CREATE TABLE IF NOT EXISTS public.dynamic_sections (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  section_name text UNIQUE NOT NULL,
  title text NOT NULL,
  subtitle text,
  description text,
  background_color text DEFAULT '#ffffff',
  text_color text DEFAULT '#000000',
  position_order integer DEFAULT 0,
  is_visible boolean DEFAULT true,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Enable RLS on dynamic_sections
ALTER TABLE public.dynamic_sections ENABLE ROW LEVEL SECURITY;

-- Drop existing policies and recreate them
DROP POLICY IF EXISTS "Allow public read access to dynamic sections" ON public.dynamic_sections;
DROP POLICY IF EXISTS "Allow authenticated users to manage dynamic sections" ON public.dynamic_sections;

CREATE POLICY "Allow public read access to dynamic sections"
  ON public.dynamic_sections
  FOR SELECT
  USING (true);

CREATE POLICY "Allow authenticated users to manage dynamic sections"
  ON public.dynamic_sections
  FOR ALL
  TO authenticated
  USING (true)
  WITH CHECK (true);

-- Add indexes for dynamic_sections
CREATE INDEX IF NOT EXISTS idx_dynamic_sections_position_order ON public.dynamic_sections(position_order);
CREATE INDEX IF NOT EXISTS idx_dynamic_sections_is_visible ON public.dynamic_sections(is_visible);

-- Add trigger for dynamic_sections
DROP TRIGGER IF EXISTS update_dynamic_sections_updated_at ON public.dynamic_sections;
CREATE TRIGGER update_dynamic_sections_updated_at
  BEFORE UPDATE ON public.dynamic_sections
  FOR EACH ROW
  EXECUTE FUNCTION public.update_updated_at_column();

-- ============================================================================
-- SECTION_ITEMS TABLE
-- ============================================================================

-- Create section_items table
CREATE TABLE IF NOT EXISTS public.section_items (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  section_id bigint NOT NULL REFERENCES public.dynamic_sections(id) ON DELETE CASCADE,
  item_type text NOT NULL,
  content jsonb NOT NULL DEFAULT '{}',
  position_order integer DEFAULT 0,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Enable RLS on section_items
ALTER TABLE public.section_items ENABLE ROW LEVEL SECURITY;

-- Drop existing policies and recreate them
DROP POLICY IF EXISTS "Allow public read access to section items" ON public.section_items;
DROP POLICY IF EXISTS "Allow authenticated users to manage section items" ON public.section_items;

CREATE POLICY "Allow public read access to section items"
  ON public.section_items
  FOR SELECT
  USING (true);

CREATE POLICY "Allow authenticated users to manage section items"
  ON public.section_items
  FOR ALL
  TO authenticated
  USING (true)
  WITH CHECK (true);

-- Add indexes for section_items
CREATE INDEX IF NOT EXISTS idx_section_items_section_id ON public.section_items(section_id);
CREATE INDEX IF NOT EXISTS idx_section_items_position_order ON public.section_items(position_order);

-- Add trigger for section_items
DROP TRIGGER IF EXISTS update_section_items_updated_at ON public.section_items;
CREATE TRIGGER update_section_items_updated_at
  BEFORE UPDATE ON public.section_items
  FOR EACH ROW
  EXECUTE FUNCTION public.update_updated_at_column();

-- ============================================================================
-- THEME_SETTINGS TABLE
-- ============================================================================

-- Create theme_settings table
CREATE TABLE IF NOT EXISTS public.theme_settings (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  setting_name text UNIQUE NOT NULL,
  setting_value jsonb NOT NULL DEFAULT '{}',
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Enable RLS on theme_settings
ALTER TABLE public.theme_settings ENABLE ROW LEVEL SECURITY;

-- Drop existing policies and recreate them
DROP POLICY IF EXISTS "Anyone can view theme settings" ON public.theme_settings;
DROP POLICY IF EXISTS "Anyone can insert theme settings" ON public.theme_settings;
DROP POLICY IF EXISTS "Anyone can update theme settings" ON public.theme_settings;

CREATE POLICY "Anyone can view theme settings"
  ON public.theme_settings
  FOR SELECT
  USING (true);

CREATE POLICY "Anyone can insert theme settings"
  ON public.theme_settings
  FOR INSERT
  WITH CHECK (true);

CREATE POLICY "Anyone can update theme settings"
  ON public.theme_settings
  FOR UPDATE
  USING (true);

-- Add trigger for theme_settings
DROP TRIGGER IF EXISTS update_theme_settings_updated_at ON public.theme_settings;
CREATE TRIGGER update_theme_settings_updated_at
  BEFORE UPDATE ON public.theme_settings
  FOR EACH ROW
  EXECUTE FUNCTION public.update_updated_at_column();

-- ============================================================================
-- INSERT DEFAULT DATA
-- ============================================================================

-- Insert default theme settings (using INSERT with WHERE NOT EXISTS)
INSERT INTO public.theme_settings (setting_name, setting_value)
SELECT 'colors', '{
  "primary": "#0EA5E9",
  "secondary": "#64748B",
  "accent": "#EC4899",
  "background": "#FFFFFF",
  "foreground": "#1E293B",
  "muted": "#F1F5F9",
  "border": "#E2E8F0"
}'::jsonb
WHERE NOT EXISTS (SELECT 1 FROM public.theme_settings WHERE setting_name = 'colors');

INSERT INTO public.theme_settings (setting_name, setting_value)
SELECT 'theme_mode', '{"mode": "light"}'::jsonb
WHERE NOT EXISTS (SELECT 1 FROM public.theme_settings WHERE setting_name = 'theme_mode');

INSERT INTO public.theme_settings (setting_name, setting_value)
SELECT 'typography', '{
  "fontFamily": "Inter",
  "headingWeight": "600",
  "bodyWeight": "400"
}'::jsonb
WHERE NOT EXISTS (SELECT 1 FROM public.theme_settings WHERE setting_name = 'typography');