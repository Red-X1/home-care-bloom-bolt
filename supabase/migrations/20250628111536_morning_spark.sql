/*
  # Fix theme_settings table structure

  1. Tables
    - Ensure `theme_settings` table exists with proper structure
    - Add missing constraints and defaults
    - Set up proper RLS policies

  2. Security
    - Enable RLS on `theme_settings` table
    - Add policies for public access (read/write)

  3. Triggers
    - Add updated_at trigger for automatic timestamp updates
*/

-- Create the theme_settings table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.theme_settings (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  setting_name TEXT UNIQUE NOT NULL,
  setting_value JSONB NOT NULL DEFAULT '{}'::jsonb,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Enable RLS
ALTER TABLE public.theme_settings ENABLE ROW LEVEL SECURITY;

-- Create policies for public access
DO $$
BEGIN
  -- Drop existing policies if they exist
  DROP POLICY IF EXISTS "Anyone can view theme settings" ON public.theme_settings;
  DROP POLICY IF EXISTS "Anyone can insert theme settings" ON public.theme_settings;
  DROP POLICY IF EXISTS "Anyone can update theme settings" ON public.theme_settings;
  
  -- Create new policies
  CREATE POLICY "Anyone can view theme settings"
    ON public.theme_settings
    FOR SELECT
    TO public
    USING (true);

  CREATE POLICY "Anyone can insert theme settings"
    ON public.theme_settings
    FOR INSERT
    TO public
    WITH CHECK (true);

  CREATE POLICY "Anyone can update theme settings"
    ON public.theme_settings
    FOR UPDATE
    TO public
    USING (true);
END $$;

-- Create or replace the update_updated_at_column function
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create the trigger for updated_at
DROP TRIGGER IF EXISTS update_theme_settings_updated_at ON public.theme_settings;
CREATE TRIGGER update_theme_settings_updated_at
  BEFORE UPDATE ON public.theme_settings
  FOR EACH ROW
  EXECUTE FUNCTION public.update_updated_at_column();

-- Insert default theme settings if they don't exist
INSERT INTO public.theme_settings (setting_name, setting_value)
VALUES 
  ('colors', '{"primary": "#3b82f6", "secondary": "#64748b", "accent": "#f59e0b", "background": "#ffffff", "text": "#1f2937"}'::jsonb),
  ('theme_mode', '{"mode": "light"}'::jsonb),
  ('typography', '{"fontFamily": "Inter", "fontSize": "16px", "lineHeight": "1.5"}'::jsonb)
ON CONFLICT (setting_name) DO NOTHING;