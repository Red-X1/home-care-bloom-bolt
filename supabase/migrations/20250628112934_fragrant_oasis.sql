/*
  # Create missing tables for dynamic sections functionality

  1. New Tables
    - `dynamic_sections` - For custom sections on the main page
    - `section_items` - For items within dynamic sections  
    - `theme_settings` - For site theme and color customization

  2. Security
    - Enable RLS on all new tables
    - Add policies for public read access
    - Add policies for authenticated user management

  3. Performance
    - Add indexes on frequently queried columns
    - Add triggers for automatic timestamp updates
*/

-- Create update function if it doesn't exist
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_proc 
    WHERE proname = 'update_updated_at_column' 
    AND pronamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'public')
  ) THEN
    CREATE FUNCTION public.update_updated_at_column()
    RETURNS TRIGGER AS $func$
    BEGIN
        NEW.updated_at = now();
        RETURN NEW;
    END;
    $func$ language 'plpgsql';
  END IF;
END $$;

-- Create dynamic_sections table
CREATE TABLE IF NOT EXISTS public.dynamic_sections (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  section_name text NOT NULL,
  title text NOT NULL,
  subtitle text,
  description text,
  background_color text DEFAULT '#ffffff',
  text_color text DEFAULT '#000000',
  position_order integer DEFAULT 0,
  is_visible boolean DEFAULT true,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Add unique constraint if it doesn't exist
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_constraint 
    WHERE conname = 'dynamic_sections_section_name_key'
  ) THEN
    ALTER TABLE public.dynamic_sections ADD CONSTRAINT dynamic_sections_section_name_key UNIQUE (section_name);
  END IF;
END $$;

-- Create section_items table
CREATE TABLE IF NOT EXISTS public.section_items (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  section_id bigint NOT NULL,
  item_type text NOT NULL,
  content jsonb NOT NULL DEFAULT '{}',
  position_order integer DEFAULT 0,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Add foreign key constraint if it doesn't exist
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_constraint 
    WHERE conname = 'section_items_section_id_fkey'
  ) THEN
    ALTER TABLE public.section_items 
    ADD CONSTRAINT section_items_section_id_fkey 
    FOREIGN KEY (section_id) REFERENCES public.dynamic_sections(id) ON DELETE CASCADE;
  END IF;
END $$;

-- Create theme_settings table
CREATE TABLE IF NOT EXISTS public.theme_settings (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  setting_name text NOT NULL,
  setting_value jsonb NOT NULL DEFAULT '{}',
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Add unique constraint if it doesn't exist
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_constraint 
    WHERE conname = 'theme_settings_setting_name_key'
  ) THEN
    ALTER TABLE public.theme_settings ADD CONSTRAINT theme_settings_setting_name_key UNIQUE (setting_name);
  END IF;
END $$;

-- Enable RLS on all tables
ALTER TABLE public.dynamic_sections ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.section_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.theme_settings ENABLE ROW LEVEL SECURITY;

-- Create policies for dynamic_sections
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'dynamic_sections' AND policyname = 'Allow public read access to dynamic sections'
  ) THEN
    CREATE POLICY "Allow public read access to dynamic sections"
      ON public.dynamic_sections
      FOR SELECT
      USING (true);
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'dynamic_sections' AND policyname = 'Allow authenticated users to manage dynamic sections'
  ) THEN
    CREATE POLICY "Allow authenticated users to manage dynamic sections"
      ON public.dynamic_sections
      FOR ALL
      TO authenticated
      USING (true)
      WITH CHECK (true);
  END IF;
END $$;

-- Create policies for section_items
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'section_items' AND policyname = 'Allow public read access to section items'
  ) THEN
    CREATE POLICY "Allow public read access to section items"
      ON public.section_items
      FOR SELECT
      USING (true);
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'section_items' AND policyname = 'Allow authenticated users to manage section items'
  ) THEN
    CREATE POLICY "Allow authenticated users to manage section items"
      ON public.section_items
      FOR ALL
      TO authenticated
      USING (true)
      WITH CHECK (true);
  END IF;
END $$;

-- Create policies for theme_settings
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'theme_settings' AND policyname = 'Anyone can view theme settings'
  ) THEN
    CREATE POLICY "Anyone can view theme settings"
      ON public.theme_settings
      FOR SELECT
      USING (true);
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'theme_settings' AND policyname = 'Anyone can insert theme settings'
  ) THEN
    CREATE POLICY "Anyone can insert theme settings"
      ON public.theme_settings
      FOR INSERT
      WITH CHECK (true);
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'theme_settings' AND policyname = 'Anyone can update theme settings'
  ) THEN
    CREATE POLICY "Anyone can update theme settings"
      ON public.theme_settings
      FOR UPDATE
      USING (true);
  END IF;
END $$;

-- Create indexes
CREATE INDEX IF NOT EXISTS idx_dynamic_sections_position_order ON public.dynamic_sections(position_order);
CREATE INDEX IF NOT EXISTS idx_dynamic_sections_is_visible ON public.dynamic_sections(is_visible);
CREATE INDEX IF NOT EXISTS idx_section_items_section_id ON public.section_items(section_id);
CREATE INDEX IF NOT EXISTS idx_section_items_position_order ON public.section_items(position_order);

-- Create triggers
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger 
    WHERE tgname = 'update_dynamic_sections_updated_at'
  ) THEN
    CREATE TRIGGER update_dynamic_sections_updated_at
      BEFORE UPDATE ON public.dynamic_sections
      FOR EACH ROW
      EXECUTE FUNCTION public.update_updated_at_column();
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger 
    WHERE tgname = 'update_section_items_updated_at'
  ) THEN
    CREATE TRIGGER update_section_items_updated_at
      BEFORE UPDATE ON public.section_items
      FOR EACH ROW
      EXECUTE FUNCTION public.update_updated_at_column();
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_trigger 
    WHERE tgname = 'update_theme_settings_updated_at'
  ) THEN
    CREATE TRIGGER update_theme_settings_updated_at
      BEFORE UPDATE ON public.theme_settings
      FOR EACH ROW
      EXECUTE FUNCTION public.update_updated_at_column();
  END IF;
END $$;

-- Insert default theme settings
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM public.theme_settings WHERE setting_name = 'colors') THEN
    INSERT INTO public.theme_settings (setting_name, setting_value) VALUES
    ('colors', '{
      "primary": "#0EA5E9",
      "secondary": "#64748B",
      "accent": "#EC4899",
      "background": "#FFFFFF",
      "foreground": "#1E293B",
      "muted": "#F1F5F9",
      "border": "#E2E8F0"
    }'::jsonb);
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM public.theme_settings WHERE setting_name = 'theme_mode') THEN
    INSERT INTO public.theme_settings (setting_name, setting_value) VALUES
    ('theme_mode', '{"mode": "light"}'::jsonb);
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM public.theme_settings WHERE setting_name = 'typography') THEN
    INSERT INTO public.theme_settings (setting_name, setting_value) VALUES
    ('typography', '{
      "fontFamily": "Inter",
      "headingWeight": "600",
      "bodyWeight": "400"
    }'::jsonb);
  END IF;
END $$;