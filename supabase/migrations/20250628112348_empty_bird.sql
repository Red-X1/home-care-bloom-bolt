/*
  # Create theme_settings table with proper error handling

  1. New Tables
    - `theme_settings` - For storing site theme configuration
      - `id` (bigint, primary key, auto-increment)
      - `setting_name` (text, unique, not null)
      - `setting_value` (jsonb, not null, default '{}')
      - `created_at` (timestamptz, default now())
      - `updated_at` (timestamptz, default now())

  2. Security
    - Enable RLS on `theme_settings` table
    - Add policies for public access (with existence checks)

  3. Default Data
    - Insert default theme settings for colors, theme_mode, and typography
*/

-- Create the theme_settings table
CREATE TABLE IF NOT EXISTS theme_settings (
  id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  setting_name text UNIQUE NOT NULL,
  setting_value jsonb NOT NULL DEFAULT '{}'::jsonb,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Enable Row Level Security
ALTER TABLE theme_settings ENABLE ROW LEVEL SECURITY;

-- Create policies for public access with existence checks
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'theme_settings' AND policyname = 'Anyone can view theme settings'
  ) THEN
    CREATE POLICY "Anyone can view theme settings"
      ON theme_settings
      FOR SELECT
      TO public
      USING (true);
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'theme_settings' AND policyname = 'Anyone can insert theme settings'
  ) THEN
    CREATE POLICY "Anyone can insert theme settings"
      ON theme_settings
      FOR INSERT
      TO public
      WITH CHECK (true);
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'theme_settings' AND policyname = 'Anyone can update theme settings'
  ) THEN
    CREATE POLICY "Anyone can update theme settings"
      ON theme_settings
      FOR UPDATE
      TO public
      USING (true);
  END IF;
END $$;

-- Create trigger function for updating updated_at if it doesn't exist
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger to automatically update updated_at (drop first if exists)
DROP TRIGGER IF EXISTS update_theme_settings_updated_at ON theme_settings;
CREATE TRIGGER update_theme_settings_updated_at
  BEFORE UPDATE ON theme_settings
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- Insert default theme settings
INSERT INTO theme_settings (setting_name, setting_value) VALUES
  ('colors', '{
    "primary": "#0EA5E9",
    "secondary": "#64748B", 
    "accent": "#EC4899",
    "background": "#FFFFFF",
    "foreground": "#1E293B",
    "muted": "#F1F5F9",
    "border": "#E2E8F0"
  }'::jsonb),
  ('theme_mode', '{"mode": "light"}'::jsonb),
  ('typography', '{
    "fontFamily": "Inter",
    "headingWeight": "600",
    "bodyWeight": "400"
  }'::jsonb)
ON CONFLICT (setting_name) DO NOTHING;