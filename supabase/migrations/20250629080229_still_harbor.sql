/*
  # Fix missing tables and policies

  1. New Tables
    - `dynamic_sections` - For custom page sections
    - `section_items` - For items within sections  
    - `theme_settings` - For theme configuration

  2. Security
    - Enable RLS on all tables
    - Add policies for authenticated and public access
    - Handle existing policies gracefully

  3. Performance
    - Add indexes for better query performance
    - Add triggers for updated_at columns
*/

-- Create update_updated_at_column function if it doesn't exist
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create dynamic_sections table if it doesn't exist
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.tables 
    WHERE table_schema = 'public' AND table_name = 'dynamic_sections'
  ) THEN
    CREATE TABLE dynamic_sections (
      id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      section_name text UNIQUE NOT NULL,
      title text NOT NULL,
      subtitle text,
      description text,
      background_color text DEFAULT '#ffffff',
      text_color text DEFAULT '#000000',
      position_order integer DEFAULT 0,
      is_visible boolean DEFAULT true,
      created_at timestamptz DEFAULT now(),
      updated_at timestamptz DEFAULT now()
    );
  END IF;
END $$;

-- Create section_items table if it doesn't exist
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.tables 
    WHERE table_schema = 'public' AND table_name = 'section_items'
  ) THEN
    CREATE TABLE section_items (
      id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      section_id bigint NOT NULL,
      item_type text NOT NULL,
      content jsonb DEFAULT '{}' NOT NULL,
      position_order integer DEFAULT 0,
      created_at timestamptz DEFAULT now(),
      updated_at timestamptz DEFAULT now()
    );
  END IF;
END $$;

-- Create theme_settings table if it doesn't exist
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.tables 
    WHERE table_schema = 'public' AND table_name = 'theme_settings'
  ) THEN
    CREATE TABLE theme_settings (
      id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      setting_name text UNIQUE NOT NULL,
      setting_value jsonb DEFAULT '{}' NOT NULL,
      created_at timestamptz DEFAULT now(),
      updated_at timestamptz DEFAULT now()
    );
  END IF;
END $$;

-- Add foreign key constraint for section_items if it doesn't exist
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.table_constraints 
    WHERE constraint_name = 'section_items_section_id_fkey'
    AND table_name = 'section_items'
  ) THEN
    ALTER TABLE section_items 
    ADD CONSTRAINT section_items_section_id_fkey 
    FOREIGN KEY (section_id) REFERENCES dynamic_sections(id) ON DELETE CASCADE;
  END IF;
END $$;

-- Enable RLS on all tables
ALTER TABLE dynamic_sections ENABLE ROW LEVEL SECURITY;
ALTER TABLE section_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE theme_settings ENABLE ROW LEVEL SECURITY;

-- Drop existing policies if they exist and recreate them
DO $$
BEGIN
  -- Dynamic sections policies
  DROP POLICY IF EXISTS "Allow authenticated users to manage dynamic sections" ON dynamic_sections;
  DROP POLICY IF EXISTS "Allow public read access to dynamic sections" ON dynamic_sections;
  
  CREATE POLICY "Allow authenticated users to manage dynamic sections"
    ON dynamic_sections FOR ALL
    TO authenticated
    USING (true)
    WITH CHECK (true);

  CREATE POLICY "Allow public read access to dynamic sections"
    ON dynamic_sections FOR SELECT
    TO public
    USING (true);
END $$;

DO $$
BEGIN
  -- Section items policies
  DROP POLICY IF EXISTS "Allow authenticated users to manage section items" ON section_items;
  DROP POLICY IF EXISTS "Allow public read access to section items" ON section_items;
  
  CREATE POLICY "Allow authenticated users to manage section items"
    ON section_items FOR ALL
    TO authenticated
    USING (true)
    WITH CHECK (true);

  CREATE POLICY "Allow public read access to section items"
    ON section_items FOR SELECT
    TO public
    USING (true);
END $$;

DO $$
BEGIN
  -- Theme settings policies
  DROP POLICY IF EXISTS "Anyone can insert theme settings" ON theme_settings;
  DROP POLICY IF EXISTS "Anyone can update theme settings" ON theme_settings;
  DROP POLICY IF EXISTS "Anyone can view theme settings" ON theme_settings;
  
  CREATE POLICY "Anyone can insert theme settings"
    ON theme_settings FOR INSERT
    TO public
    WITH CHECK (true);

  CREATE POLICY "Anyone can update theme settings"
    ON theme_settings FOR UPDATE
    TO public
    USING (true);

  CREATE POLICY "Anyone can view theme settings"
    ON theme_settings FOR SELECT
    TO public
    USING (true);
END $$;

-- Create indexes if they don't exist
DO $$
BEGIN
  -- Dynamic sections indexes
  IF NOT EXISTS (
    SELECT 1 FROM pg_indexes 
    WHERE indexname = 'idx_dynamic_sections_position_order'
  ) THEN
    CREATE INDEX idx_dynamic_sections_position_order ON dynamic_sections(position_order);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_indexes 
    WHERE indexname = 'idx_dynamic_sections_is_visible'
  ) THEN
    CREATE INDEX idx_dynamic_sections_is_visible ON dynamic_sections(is_visible);
  END IF;

  -- Section items indexes
  IF NOT EXISTS (
    SELECT 1 FROM pg_indexes 
    WHERE indexname = 'idx_section_items_section_id'
  ) THEN
    CREATE INDEX idx_section_items_section_id ON section_items(section_id);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_indexes 
    WHERE indexname = 'idx_section_items_position_order'
  ) THEN
    CREATE INDEX idx_section_items_position_order ON section_items(position_order);
  END IF;
END $$;

-- Create triggers for updated_at columns if they don't exist
DO $$
BEGIN
  -- Dynamic sections trigger
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.triggers 
    WHERE trigger_name = 'update_dynamic_sections_updated_at'
  ) THEN
    CREATE TRIGGER update_dynamic_sections_updated_at
      BEFORE UPDATE ON dynamic_sections
      FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
  END IF;

  -- Section items trigger
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.triggers 
    WHERE trigger_name = 'update_section_items_updated_at'
  ) THEN
    CREATE TRIGGER update_section_items_updated_at
      BEFORE UPDATE ON section_items
      FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
  END IF;

  -- Theme settings trigger
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.triggers 
    WHERE trigger_name = 'update_theme_settings_updated_at'
  ) THEN
    CREATE TRIGGER update_theme_settings_updated_at
      BEFORE UPDATE ON theme_settings
      FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
  END IF;
END $$;

-- Insert default theme settings if they don't exist
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM theme_settings WHERE setting_name = 'colors'
  ) THEN
    INSERT INTO theme_settings (setting_name, setting_value) VALUES 
    ('colors', '{"primary": "#0EA5E9", "secondary": "#64748B", "accent": "#EC4899", "background": "#FFFFFF", "foreground": "#1E293B", "muted": "#F1F5F9", "border": "#E2E8F0"}'::jsonb);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM theme_settings WHERE setting_name = 'theme_mode'
  ) THEN
    INSERT INTO theme_settings (setting_name, setting_value) VALUES 
    ('theme_mode', '{"mode": "light"}'::jsonb);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM theme_settings WHERE setting_name = 'typography'
  ) THEN
    INSERT INTO theme_settings (setting_name, setting_value) VALUES 
    ('typography', '{"fontFamily": "Inter", "headingWeight": "600", "bodyWeight": "400"}'::jsonb);
  END IF;
END $$;