/*
  # Fix Dynamic Sections Tables

  1. Tables
    - Ensure `dynamic_sections` table exists with correct structure
    - Ensure `section_items` table exists with correct structure
    - Add missing columns and constraints if needed

  2. Security
    - Enable RLS on both tables
    - Add policies for public read access
    - Add policies for authenticated user write access

  3. Triggers
    - Add updated_at triggers for both tables
*/

-- Create the update_updated_at_column function if it doesn't exist
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create dynamic_sections table if it doesn't exist
CREATE TABLE IF NOT EXISTS dynamic_sections (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    section_name text UNIQUE NOT NULL,
    title text NOT NULL,
    subtitle text,
    description text,
    background_color text DEFAULT '#ffffff'::text,
    text_color text DEFAULT '#000000'::text,
    position_order integer DEFAULT 0,
    is_visible boolean DEFAULT true,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);

-- Create section_items table if it doesn't exist
CREATE TABLE IF NOT EXISTS section_items (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    section_id bigint REFERENCES dynamic_sections(id) ON DELETE CASCADE,
    item_type text NOT NULL,
    content jsonb DEFAULT '{}'::jsonb NOT NULL,
    position_order integer DEFAULT 0,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);

-- Enable RLS
ALTER TABLE dynamic_sections ENABLE ROW LEVEL SECURITY;
ALTER TABLE section_items ENABLE ROW LEVEL SECURITY;

-- Drop existing policies if they exist
DROP POLICY IF EXISTS "Anyone can view dynamic sections" ON dynamic_sections;
DROP POLICY IF EXISTS "Anyone can insert dynamic sections" ON dynamic_sections;
DROP POLICY IF EXISTS "Anyone can update dynamic sections" ON dynamic_sections;
DROP POLICY IF EXISTS "Anyone can delete dynamic sections" ON dynamic_sections;

DROP POLICY IF EXISTS "Anyone can view section items" ON section_items;
DROP POLICY IF EXISTS "Anyone can insert section items" ON section_items;
DROP POLICY IF EXISTS "Anyone can update section items" ON section_items;
DROP POLICY IF EXISTS "Anyone can delete section items" ON section_items;

-- Create policies for dynamic_sections
CREATE POLICY "Anyone can view dynamic sections"
    ON dynamic_sections
    FOR SELECT
    TO public
    USING (true);

CREATE POLICY "Anyone can insert dynamic sections"
    ON dynamic_sections
    FOR INSERT
    TO public
    WITH CHECK (true);

CREATE POLICY "Anyone can update dynamic sections"
    ON dynamic_sections
    FOR UPDATE
    TO public
    USING (true);

CREATE POLICY "Anyone can delete dynamic sections"
    ON dynamic_sections
    FOR DELETE
    TO public
    USING (true);

-- Create policies for section_items
CREATE POLICY "Anyone can view section items"
    ON section_items
    FOR SELECT
    TO public
    USING (true);

CREATE POLICY "Anyone can insert section items"
    ON section_items
    FOR INSERT
    TO public
    WITH CHECK (true);

CREATE POLICY "Anyone can update section items"
    ON section_items
    FOR UPDATE
    TO public
    USING (true);

CREATE POLICY "Anyone can delete section items"
    ON section_items
    FOR DELETE
    TO public
    USING (true);

-- Create or replace triggers for updated_at
DROP TRIGGER IF EXISTS update_dynamic_sections_updated_at ON dynamic_sections;
CREATE TRIGGER update_dynamic_sections_updated_at
    BEFORE UPDATE ON dynamic_sections
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS update_section_items_updated_at ON section_items;
CREATE TRIGGER update_section_items_updated_at
    BEFORE UPDATE ON section_items
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();