/*
  # Create dynamic sections and section items tables

  1. New Tables
    - `dynamic_sections`
      - `id` (bigint, primary key, auto-increment)
      - `section_name` (text, unique, not null)
      - `title` (text, not null)
      - `subtitle` (text, nullable)
      - `description` (text, nullable)
      - `background_color` (text, default '#ffffff')
      - `text_color` (text, default '#000000')
      - `position_order` (integer, default 0)
      - `is_visible` (boolean, default true)
      - `created_at` (timestamptz, default now())
      - `updated_at` (timestamptz, default now())
    
    - `section_items`
      - `id` (bigint, primary key, auto-increment)
      - `section_id` (bigint, foreign key to dynamic_sections)
      - `item_type` (text, not null)
      - `content` (jsonb, default '{}')
      - `position_order` (integer, default 0)
      - `created_at` (timestamptz, default now())
      - `updated_at` (timestamptz, default now())

  2. Security
    - Enable RLS on both tables
    - Add policies for public access (read, insert, update, delete)

  3. Triggers
    - Add update_updated_at triggers for both tables
*/

-- Create the update_updated_at_column function if it doesn't exist
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create dynamic_sections table
CREATE TABLE IF NOT EXISTS dynamic_sections (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  section_name TEXT UNIQUE NOT NULL,
  title TEXT NOT NULL,
  subtitle TEXT,
  description TEXT,
  background_color TEXT DEFAULT '#ffffff',
  text_color TEXT DEFAULT '#000000',
  position_order INTEGER DEFAULT 0,
  is_visible BOOLEAN DEFAULT true,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create section_items table
CREATE TABLE IF NOT EXISTS section_items (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  section_id BIGINT REFERENCES dynamic_sections(id) ON DELETE CASCADE,
  item_type TEXT NOT NULL,
  content JSONB DEFAULT '{}'::jsonb,
  position_order INTEGER DEFAULT 0,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Enable RLS
ALTER TABLE dynamic_sections ENABLE ROW LEVEL SECURITY;
ALTER TABLE section_items ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for dynamic_sections
CREATE POLICY "Anyone can view dynamic sections"
  ON dynamic_sections
  FOR SELECT
  TO public
  USING (true);

CREATE POLICY "Anyone can insert dynamic sections"
  ON dynamic_sections
  FOR INSERT
  TO public
  WITH CHECK (true);

CREATE POLICY "Anyone can update dynamic sections"
  ON dynamic_sections
  FOR UPDATE
  TO public
  USING (true);

CREATE POLICY "Anyone can delete dynamic sections"
  ON dynamic_sections
  FOR DELETE
  TO public
  USING (true);

-- Create RLS policies for section_items
CREATE POLICY "Anyone can view section items"
  ON section_items
  FOR SELECT
  TO public
  USING (true);

CREATE POLICY "Anyone can insert section items"
  ON section_items
  FOR INSERT
  TO public
  WITH CHECK (true);

CREATE POLICY "Anyone can update section items"
  ON section_items
  FOR UPDATE
  TO public
  USING (true);

CREATE POLICY "Anyone can delete section items"
  ON section_items
  FOR DELETE
  TO public
  USING (true);

-- Create triggers for updating updated_at columns
CREATE TRIGGER update_dynamic_sections_updated_at
  BEFORE UPDATE ON dynamic_sections
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_section_items_updated_at
  BEFORE UPDATE ON section_items
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();