/*
  # Ensure dynamic sections and section items tables exist

  1. New Tables (if not exists)
    - `dynamic_sections`
      - `id` (bigint, primary key, auto-increment)
      - `section_name` (text, unique, not null)
      - `title` (text, not null)
      - `subtitle` (text, nullable)
      - `description` (text, nullable)
      - `background_color` (text, default '#ffffff')
      - `text_color` (text, default '#000000')
      - `position_order` (integer, default 0)
      - `is_visible` (boolean, default true)
      - `created_at` (timestamptz, default now())
      - `updated_at` (timestamptz, default now())
    
    - `section_items`
      - `id` (bigint, primary key, auto-increment)
      - `section_id` (bigint, foreign key to dynamic_sections)
      - `item_type` (text, not null)
      - `content` (jsonb, default '{}')
      - `position_order` (integer, default 0)
      - `created_at` (timestamptz, default now())
      - `updated_at` (timestamptz, default now())

  2. Security
    - Enable RLS on both tables
    - Add policies for authenticated users to manage data
    - Add policies for public read access

  3. Indexes
    - Add indexes for performance optimization
    - Add triggers for updated_at columns
*/

-- Create update_updated_at_column function if it doesn't exist
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create dynamic_sections table
CREATE TABLE IF NOT EXISTS dynamic_sections (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  section_name text UNIQUE NOT NULL,
  title text NOT NULL,
  subtitle text,
  description text,
  background_color text DEFAULT '#ffffff',
  text_color text DEFAULT '#000000',
  position_order integer DEFAULT 0,
  is_visible boolean DEFAULT true,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

-- Create section_items table
CREATE TABLE IF NOT EXISTS section_items (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  section_id bigint NOT NULL,
  item_type text NOT NULL,
  content jsonb DEFAULT '{}',
  position_order integer DEFAULT 0,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  CONSTRAINT section_items_section_id_fkey 
    FOREIGN KEY (section_id) 
    REFERENCES dynamic_sections(id) 
    ON DELETE CASCADE
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_dynamic_sections_position_order 
  ON dynamic_sections(position_order);
CREATE INDEX IF NOT EXISTS idx_dynamic_sections_is_visible 
  ON dynamic_sections(is_visible);
CREATE INDEX IF NOT EXISTS idx_section_items_section_id 
  ON section_items(section_id);
CREATE INDEX IF NOT EXISTS idx_section_items_position_order 
  ON section_items(position_order);

-- Enable Row Level Security
ALTER TABLE dynamic_sections ENABLE ROW LEVEL SECURITY;
ALTER TABLE section_items ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for dynamic_sections
DO $$
BEGIN
  -- Drop existing policies if they exist
  DROP POLICY IF EXISTS "Allow public read access to dynamic sections" ON dynamic_sections;
  DROP POLICY IF EXISTS "Allow authenticated users to manage dynamic sections" ON dynamic_sections;
  
  -- Create new policies
  CREATE POLICY "Allow public read access to dynamic sections"
    ON dynamic_sections
    FOR SELECT
    TO public
    USING (true);

  CREATE POLICY "Allow authenticated users to manage dynamic sections"
    ON dynamic_sections
    FOR ALL
    TO authenticated
    USING (true)
    WITH CHECK (true);
END $$;

-- Create RLS policies for section_items
DO $$
BEGIN
  -- Drop existing policies if they exist
  DROP POLICY IF EXISTS "Allow public read access to section items" ON section_items;
  DROP POLICY IF EXISTS "Allow authenticated users to manage section items" ON section_items;
  
  -- Create new policies
  CREATE POLICY "Allow public read access to section items"
    ON section_items
    FOR SELECT
    TO public
    USING (true);

  CREATE POLICY "Allow authenticated users to manage section items"
    ON section_items
    FOR ALL
    TO authenticated
    USING (true)
    WITH CHECK (true);
END $$;

-- Create triggers for updated_at columns
DROP TRIGGER IF EXISTS update_dynamic_sections_updated_at ON dynamic_sections;
CREATE TRIGGER update_dynamic_sections_updated_at
  BEFORE UPDATE ON dynamic_sections
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS update_section_items_updated_at ON section_items;
CREATE TRIGGER update_section_items_updated_at
  BEFORE UPDATE ON section_items
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();