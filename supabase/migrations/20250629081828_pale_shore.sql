/*
  # Create theme_settings table

  1. New Tables
    - `theme_settings`
      - `id` (bigint, primary key, auto-increment)
      - `setting_name` (text, unique, not null)
      - `setting_value` (jsonb, not null)
      - `created_at` (timestamptz, default now())
      - `updated_at` (timestamptz, default now())

  2. Security
    - Enable RLS on `theme_settings` table
    - Add policy for public read access
    - Add policy for authenticated users to insert/update

  3. Initial Data
    - Insert default theme settings (colors, theme_mode, typography)
*/

-- Create the theme_settings table
CREATE TABLE IF NOT EXISTS public.theme_settings (
    id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    setting_name text NOT NULL,
    setting_value jsonb NOT NULL DEFAULT '{}'::jsonb,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT theme_settings_pkey PRIMARY KEY (id),
    CONSTRAINT theme_settings_setting_name_key UNIQUE (setting_name)
);

-- Enable Row Level Security
ALTER TABLE public.theme_settings ENABLE ROW LEVEL SECURITY;

-- Create policies for theme settings access
CREATE POLICY "Allow read access for all users" 
ON public.theme_settings 
FOR SELECT 
USING (true);

CREATE POLICY "Allow insert access for all users" 
ON public.theme_settings 
FOR INSERT 
WITH CHECK (true);

CREATE POLICY "Allow update access for all users" 
ON public.theme_settings 
FOR UPDATE 
USING (true);

-- Create trigger function for updating updated_at if it doesn't exist
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger to automatically update updated_at
CREATE TRIGGER update_theme_settings_updated_at
  BEFORE UPDATE ON public.theme_settings
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- Insert default theme settings
INSERT INTO public.theme_settings (setting_name, setting_value)
VALUES
    ('colors', '{"primary": "#0EA5E9", "secondary": "#64748B", "accent": "#EC4899", "background": "#FFFFFF", "foreground": "#1E293B", "muted": "#F1F5F9", "border": "#E2E8F0"}'::jsonb),
    ('theme_mode', '{"mode": "light"}'::jsonb),
    ('typography', '{"fontFamily": "Inter", "headingWeight": "600", "bodyWeight": "400"}'::jsonb)
ON CONFLICT (setting_name) DO NOTHING;